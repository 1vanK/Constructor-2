/*
	Класс, реализующий обмен данными с сервером
*/


using System;
using System.Text;


delegate void ОбработчикСобытияПолучениеДанных(Строка[] строки);


class Соединение
{
	public event ОбработчикСобытияПолучениеДанных ПолучениеДанных = null;

	Сокет сокет = new Сокет();
	Декомпрессор декомпрессор = new Декомпрессор();
	Дешифратор дешифратор = new Дешифратор();
	bool происходитПодключение = false;
	StringBuilder отправляемыйТекст = null;
	string сервер = null; // используется при подключении через прокси
	int порт = 0;

	void Сбросить()
	{
		lock (this)
		{
			сокет.Уничтожить();
			сокет = new Сокет();
			декомпрессор = new Декомпрессор();
			дешифратор = new Дешифратор();
			происходитПодключение = false;
			отправляемыйТекст = null;
			сервер = null;
			порт = 0;
		}
	}

	public bool Установлено
	{
		get
		{
			return сокет.Connected;
		}
	}

	protected virtual void ОбработатьСобытиеПолучениеДанных(params Строка[] строки)
	{
		if (ПолучениеДанных != null)
			ПолучениеДанных(строки);
	}

	public void ВыдатьИнформацию()
	{
		if (!Установлено)
		{
			ОбработатьСобытиеПолучениеДанных(new Строка("### Соединение не установлено."));
		}
		else if (декомпрессор.ВерсияMccp == 0)
		{
			ОбработатьСобытиеПолучениеДанных(new Строка("### Сжатие отсутствует."));
		}
		else
		{
			ОбработатьСобытиеПолучениеДанных(new Строка("### Версия MCCP: " + декомпрессор.ВерсияMccp + "."));
			ОбработатьСобытиеПолучениеДанных(new Строка("### Коэффициент сжатия: " + декомпрессор.КоэффициентСжатия.ToString("F2") + "."));
		}
	}

	public void ПередатьДанные()
	{
		lock (this)
		{
			if (отправляемыйТекст == null)
				return;
			отправляемыйТекст = отправляемыйТекст.Replace("\r\n", "\n");
			отправляемыйТекст = отправляемыйТекст.Replace("\n", "\r\n");
			отправляемыйТекст = отправляемыйТекст.Replace("я", "яя");
			отправляемыйТекст.Append("\r\n");
			byte[] байты = Encoding.GetEncoding(1251).GetBytes(отправляемыйТекст.ToString());
			отправляемыйТекст = null;
			сокет.BeginSend(байты, 0, байты.Length, 0, new AsyncCallback(ЗавершитьОтправку), new СостояниеСокета(сокет, null));
		}
	}

	public void Записать(params string[] строки)
	{
		lock (this)
		{
			foreach (string строка in строки)
			{
				if (строка == null)
					continue;
				if (!Установлено)
				{
					ОбработатьСобытиеПолучениеДанных(new Строка("### Соединение не установлено."));
					return;
				}
				if (отправляемыйТекст == null)
					отправляемыйТекст = new StringBuilder(256);
				else
					отправляемыйТекст.Append('\n');
				отправляемыйТекст.Append(строка);
			}
		}
	}

	public void Отправить(params string[] строки)
	{
		Записать(строки);
		ПередатьДанные();
	}

	void Отправить(byte[] байты)
	{
		if (!Установлено)
		{
			ОбработатьСобытиеПолучениеДанных(new Строка("### Соединение не установлено."));
			return;
		}
		сокет.BeginSend(байты, 0, байты.Length, 0, new AsyncCallback(ЗавершитьОтправку), new СостояниеСокета(сокет, null));
	}

	void ЗавершитьОтправку(IAsyncResult asyncResult)
	{
		СостояниеСокета состояние = (СостояниеСокета)asyncResult.AsyncState;
		if (состояние.Сокет.Уничтожен)
			return;
		try
		{
			состояние.Сокет.EndSend(asyncResult);
		}
		catch
		{
			Сбросить();
			ОбработатьСобытиеПолучениеДанных(new Строка("### Соединение утеряно. "));
			return;
		}
	}

	public void Разорвать()
	{
		if (!Установлено && !происходитПодключение)
		{
			ОбработатьСобытиеПолучениеДанных(new Строка("### Соединение не установлено."));
			return;
		}
		Сбросить();
		ОбработатьСобытиеПолучениеДанных(new Строка("### Соединение разорвано пользователем. "));
	}

	public void Установить(string сервер, int порт, string проксиСервер, int портПрокси)
	{
		if (происходитПодключение)
		{
			ОбработатьСобытиеПолучениеДанных(new Строка("### В данный момент происходит установка соединения."));
			return;
		}
		if (Установлено)
		{
			ОбработатьСобытиеПолучениеДанных(new Строка("### Сперва разорвите существующее подключение."));
			return;
		}
		this.сервер = сервер;
		this.порт = порт;
		Установить(проксиСервер, портПрокси);
	}

	public void Установить(string сервер, int порт)
	{
		if (происходитПодключение)
		{
			ОбработатьСобытиеПолучениеДанных(new Строка("### В данный момент происходит установка соединения."));
			return;
		}
		if (Установлено)
		{
			ОбработатьСобытиеПолучениеДанных(new Строка("### Сперва разорвите существующее подключение."));
			return;
		}
		происходитПодключение = true;
		try
		{
			сокет.BeginConnect(сервер, порт, new AsyncCallback(ЗавершитьУстановкуСоединения), new СостояниеСокета(сокет, null));
		}
		catch
		{
			Сбросить();
			ОбработатьСобытиеПолучениеДанных(new Строка("### Не удалось установить соединение. "));
			return;
		}
		ОбработатьСобытиеПолучениеДанных(new Строка("### Подключение к " + сервер + ":" + порт + "..."));
	}

	void ЗавершитьУстановкуСоединения(IAsyncResult asyncResult)
	{
		СостояниеСокета состояние = (СостояниеСокета)asyncResult.AsyncState;
		if (состояние.Сокет.Уничтожен)
			return;
		try
		{
			состояние.Сокет.EndConnect(asyncResult);
		}
		catch
		{
			Сбросить();
			ОбработатьСобытиеПолучениеДанных(new Строка("### Не удалось установить соединение. "));
			return;
		}
		происходитПодключение = false;
		if (сервер == null)
		{
			ОбработатьСобытиеПолучениеДанных(new Строка("### Соединение успешно установлено. "));
		}
		else
		{
			Отправить("CONNECT " + сервер + ":" + порт + " HTTP/1.0\n");
			ОбработатьСобытиеПолучениеДанных(new Строка("### Соединение с прокси-сервером успешно установлено. "));
		}
		byte[] буфер = new byte[16384];
		сокет.BeginReceive(буфер, 0, буфер.Length, 0, new AsyncCallback(ЗавершитьПолучение), new СостояниеСокета(сокет, буфер));
	}

	void ЗавершитьПолучение(IAsyncResult asyncResult)
	{
		СостояниеСокета состояние = (СостояниеСокета)asyncResult.AsyncState;
		if (состояние.Сокет.Уничтожен)
			return;
		int длина;
		try
		{
			длина = состояние.Сокет.EndReceive(asyncResult);
		}
		catch
		{
			Сбросить();
			ОбработатьСобытиеПолучениеДанных(new Строка("### Соединение утеряно. "));
			return;
		}
		if (длина == 0)
		{
			Сбросить();
			ОбработатьСобытиеПолучениеДанных(new Строка("### Соединение утеряно. "));
			return;
		}
		byte[] буфер = состояние.Данные;
		byte[] ответСерверу;
		byte[] байты = декомпрессор.Распаковать(буфер, длина, out ответСерверу);
		if (ответСерверу.Length > 0)
			Отправить(ответСерверу);
		Строка[] строки = дешифратор.Декодировать(байты);
		if (строки.Length > 0)
			ОбработатьСобытиеПолучениеДанных(строки);
		сокет.BeginReceive(буфер, 0, буфер.Length, 0, new AsyncCallback(ЗавершитьПолучение), состояние);
	}
}

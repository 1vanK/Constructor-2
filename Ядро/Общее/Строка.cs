/*
	Цветная строка
*/


using System.Collections.Generic;


class Строка : List<Символ>
{
	string значение = null;

	public override string ToString()
	{
		if (значение == null)
		{
			char[] символы = new char[Длина];
			for (int i = 0; i < Длина; i++)
				символы[i] = this[i].Значение;
			значение = new string(символы);
		}
		return значение;
	}

	public void Добавить(IEnumerable<Символ> символы)
	{
		значение = null;
		AddRange(символы);
	}

	public void Добавить(Символ символ)
	{
		значение = null;
		Add(символ);
	}

	public void Очистить()
	{
		значение = null;
		Clear();
	}

	new public Символ this[int индекс]
	{
		get
		{
			return base[индекс];
		}
		set
		{
			значение = null;
			base[индекс] = value;
		}
	}

	public void Удалить(int номер)
	{
		значение = null;
		RemoveAt(номер);
	}

	public void УбратьПробелыВКонце()
	{
		while (Длина > 0 && this[Длина - 1].Значение == ' ')
			Удалить(Длина - 1);
	}

	public void Добавить(string строка, byte цвет)
	{
		Добавить(new Строка(строка, цвет));
	}

	public void Добавить(string строка)
	{
		Добавить(new Строка(строка));
	}

	public void Добавить(string строка, byte цветПереднегоПлана, byte цветФона)
	{
		Добавить(new Строка(строка, цветПереднегоПлана, цветФона));
	}

	public Строка()
	{
	}

	public Строка(int емкость) : base(емкость)
	{
	}

	public Строка(string значение, byte цветПереднегоПлана, byte цветФона)
	{
		int длина = значение.Length;
		Символ[] символы = new Символ[длина];
		for (int i = 0; i < длина; i++)
			символы[i] = new Символ(значение[i], цветПереднегоПлана, цветФона);
		Добавить(символы);
	}

	public Строка(string значение, byte цвет)
	{
		int длина = значение.Length;
		Символ[] символы = new Символ[длина];
		for (int i = 0; i < длина; i++)
			символы[i] = new Символ(значение[i], цвет);
		Добавить(символы);
	}

	public Строка(string значение) : this(значение, 0x07)
	{
	}

	public int Длина
	{
		get
		{
			return Count;
		}
	}

	public Строка Копировать(int начало, int длина)
	{
		Символ[] символы = new Символ[длина];
		CopyTo(начало, символы, 0, длина);
		Строка результат = new Строка();
		результат.Добавить(символы);
		return результат;
	}

	public Строка Копировать(int начало)
	{
		return Копировать(начало, Длина - начало);
	}

	public Строка Копировать()
	{
		return Копировать(0);
	}

	public Строка[] Разрезать(int максДлина)
	{
		int числоФрагментов = Длина / максДлина;
		if (числоФрагментов * максДлина < Длина || числоФрагментов == 0)
			числоФрагментов++;
		Строка[] фрагменты = new Строка[числоФрагментов];
		int i = 0;
		for (; i < числоФрагментов - 1; i++)
			фрагменты[i] = Копировать(i * максДлина, максДлина);
		фрагменты[i] = Копировать(i * максДлина);
		return фрагменты;
	}

	public void Перекрасить(int начало, int длина, byte цвет)
	{
		for (int i = начало; i < начало + длина; i++)
			this[i] = new Символ(this[i].Значение, цвет);
	}

	public void Перекрасить(int начало, byte цвет)
	{
		Перекрасить(начало, Длина - начало, цвет);
	}

	public void Перекрасить(byte цвет)
	{
		Перекрасить(0, цвет);
	}

	public void Перекрасить(string фрагмент, byte цвет)
	{
		string значение = ToString();
		int длинаФрагмента = фрагмент.Length;
		int индекс = 0;
		while (true)
		{
			индекс = значение.IndexOf(фрагмент, индекс);
			if (индекс < 0)
				break;
			Перекрасить(индекс, длинаФрагмента, цвет);
			индекс += длинаФрагмента;
		}
	}

	void Заменить(string образец, string новоеЗначение, bool изменитьЦвет, byte новыйЦвет)
	{
		string значение = ToString();
		int длинаОбразца = образец.Length;
		Строка результат = new Строка(Длина * 2);
		int позиция = 0;
		bool строкаИзменена = false;
		while (true)
		{
			int индекс = значение.IndexOf(образец, позиция);
			if (индекс < 0)
				break;
			строкаИзменена = true;
			результат.Добавить(Копировать(позиция, индекс - позиция));
			byte цвет = this[индекс].Цвет;
			if (изменитьЦвет)
				цвет = новыйЦвет;
			результат.Добавить(new Строка(новоеЗначение, цвет));
			позиция = индекс + длинаОбразца;
		}
		if (строкаИзменена)
		{
			результат.Добавить(Копировать(позиция));
			Очистить();
			Добавить(результат);
		}
	}

	public void Заменить(string образец, string новоеЗначение)
	{
		Заменить(образец, новоеЗначение, false, 0);
	}

	public void Заменить(string образец, string новоеЗначение, byte цвет)
	{
		Заменить(образец, новоеЗначение, true, цвет);
	}
}

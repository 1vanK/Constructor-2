/*
	Элемент для отображения цветного текста
*/


//#define ОТЛАДКА


using System;
using System.Collections.Generic;
using System.Drawing;
using System.Text;
using System.Windows.Forms;


class ЭлементВывода : Control
{
	public const int Емкость = 10000;

	Графика графика = new Графика();
	КруговойБуфер<Строка> строки = new КруговойБуфер<Строка>(Емкость);
	List<Строка> дополнительныеСтроки = new List<Строка>(256);
	ПолосаПрокрутки полосаПрокрутки = new ПолосаПрокрутки();
	Point начальныеКоординатыУказателя = new Point(-1, -1); // используются при выделении
	Строка эхо = null; // эхо выводится в одной строке
	StringBuilder выделенныйТекст = new StringBuilder();
	bool компактныйВывод = true;

	public bool КомпактныйВывод
	{
		get
		{
			return компактныйВывод;
		}
		set
		{
			if (компактныйВывод == value)
				return;
			компактныйВывод = value;
			Invalidate();
		}
	}

	protected List<Строка> ДополнительныеСтроки
	{
		get
		{
			return дополнительныеСтроки;
		}
	}

	public ЭлементВывода Копировать()
	{
		ЭлементВывода копия = new ЭлементВывода();
		копия.Parent = Parent;
		List<Строка> добавляемыеСтроки = new List<Строка>(ЧислоСтрок);
		for (int i = 0; i < строки.ЧислоЭлементов; i++)
			добавляемыеСтроки.Add(строки[i]);
		добавляемыеСтроки.AddRange(дополнительныеСтроки);
		копия.Вывести(добавляемыеСтроки.ToArray());
		return копия;
	}

	public int ЧислоСтрок
	{
		get
		{
			return строки.ЧислоЭлементов + дополнительныеСтроки.Count;
		}
	}

	public void ДобавитьЭхо(string команда)
	{
		lock (this)
		{
			if (эхо == null)
			{
				эхо = new Строка(64);
				Добавить(эхо);
			}
			эхо.Добавить("[", 2);
			эхо.Добавить(команда, 3);
			эхо.Добавить("]", 2);
		}
	}

	public void НачатьФормированиеНовогоЭха()
	{
		lock (this)
		{
			эхо = null;
		}
	}

	public void Очистить()
	{
		строки.Очистить();
		дополнительныеСтроки = new List<Строка>(256);
		полосаПрокрутки.Восстановить();
		начальныеКоординатыУказателя = new Point(-1, -1);
		выделенныйТекст = new StringBuilder();
		Cursor = Cursors.Arrow;
		эхо = null;
		Invalidate();
	}

	public ЭлементВывода()
	{
		SetStyle(ControlStyles.Opaque, true);
		SetStyle(ControlStyles.AllPaintingInWmPaint, true);
		SetStyle(ControlStyles.UserPaint, true);
		SetStyle(ControlStyles.ResizeRedraw, true);
		Width = Height = 100;
		Cursor = Cursors.Arrow;
		TabStop = false;
		полосаПрокрутки.Parent = this;
	}

	public virtual void Вывести()
	{
		lock (this)
		{
			НачатьФормированиеНовогоЭха();
			if (дополнительныеСтроки.Count == 0 || начальныеКоординатыУказателя.X != -1)
				return;
			int смещениеПолзуна = Math.Max(0, дополнительныеСтроки.Count + строки.ЧислоЭлементов - строки.Емкость);
			bool зафиксированныйПолзун = (полосаПрокрутки.Value == полосаПрокрутки.Максимум);
			foreach (Строка строка in дополнительныеСтроки)
				строки.Добавить(строка);
			дополнительныеСтроки = new List<Строка>(256);
			полосаПрокрутки.ИгнорироватьИзменениеЗначения = true;
			полосаПрокрутки.Максимум = строки.ЧислоЭлементов - 1;
			if (зафиксированныйПолзун)
				полосаПрокрутки.Value = полосаПрокрутки.Максимум;
			else
				полосаПрокрутки.Value = Math.Max(0, полосаПрокрутки.Value - смещениеПолзуна);
			полосаПрокрутки.ИгнорироватьИзменениеЗначения = false;
			Invalidate();
		}
	}

	public virtual void Добавить(params Строка[] добавляемыеСтроки)
	{
		lock (this)
		{
			дополнительныеСтроки.AddRange(добавляемыеСтроки);
		}
	}

	public void Добавить(byte цвет, params string[] строки)
	{
		Строка[] цветныеСтроки = new Строка[строки.Length];
		for (int i = 0; i < строки.Length; i++)
			цветныеСтроки[i] = new Строка(строки[i], цвет);
		Добавить(цветныеСтроки);
	}

	public void Добавить(params string[] строки)
	{
		Добавить(0x07, строки);
	}

	public void Вывести(params Строка[] строки)
	{
		Добавить(строки);
		Вывести();
	}

	public void Вывести(byte цвет, params string[] строки)
	{
		Добавить(цвет, строки);
		Вывести();
	}

	public void Вывести(params string[] строки)
	{
		Добавить(строки);
		Вывести();
	}

	public void Прокрутить(int смещение)
	{
		lock (this)
		{
			int новоеПоложение = полосаПрокрутки.Value + смещение;
			if (новоеПоложение < полосаПрокрутки.Minimum)
				новоеПоложение = полосаПрокрутки.Minimum;
			if (новоеПоложение > полосаПрокрутки.Maximum)
				новоеПоложение = полосаПрокрутки.Maximum;
			полосаПрокрутки.Value = новоеПоложение;
		}
	}

	public void ПрокрутитьВКонец()
	{
		полосаПрокрутки.Value = полосаПрокрутки.Maximum;
	}

	public bool ЗафиксированныйПолзун
	{
		get
		{
			return (полосаПрокрутки.Value == полосаПрокрутки.Maximum);
		}
	}

	void НачатьВыделение()
	{
		DoubleBuffered = true;
		Cursor = Cursors.IBeam;
		Invalidate();
	}

	void ЗавершитьВыделение()
	{
		while (true)
		{
			int длина = выделенныйТекст.Length;
			if (длина < 2)
				break;
			if (выделенныйТекст[длина - 2] == '\r' && выделенныйТекст[длина - 1] == '\n')
				выделенныйТекст.Remove(длина - 2, 2);
			else if (выделенныйТекст[0] == '\r' && выделенныйТекст[1] == '\n')
				выделенныйТекст.Remove(0, 2);
			else
				break;
		}
		if (выделенныйТекст.Length > 0)
			Clipboard.SetDataObject(выделенныйТекст.ToString());
		начальныеКоординатыУказателя = new Point(-1, -1);
		DoubleBuffered = false;
		выделенныйТекст = new StringBuilder();
		Cursor = Cursors.Arrow;
		if (дополнительныеСтроки.Count != 0)
			Вывести();
		else
			Invalidate();
	}

	protected override void OnMouseDown(MouseEventArgs e)
	{
		if (e.Button != MouseButtons.Left)
			return;
		// Если при нажатой левой кнопке мыши вывести курсор за пределы окна,
		// нажать и отпустить правую (или среднюю) кнопку, а затем отпустить
		// левую кнопку, то при возвращении курсора в окно нужно снова
		// нажать левую кнопку, чтобы прекратить выделение.
		if (начальныеКоординатыУказателя.X != -1)
		{
			ЗавершитьВыделение();
			return;
		}
		начальныеКоординатыУказателя = e.Location;
		НачатьВыделение();
	}

	protected override void OnMouseMove(MouseEventArgs e)
	{
		if (начальныеКоординатыУказателя.X != -1)
			Invalidate();
	}

	protected override void OnMouseUp(MouseEventArgs e)
	{
		if (e.Button != MouseButtons.Left)
			return;
		ЗавершитьВыделение();
	}

	void НарисоватьСтроку(Строка строка, int y)
	{
		if (строка.Длина == 0)
			return;
		int x = 0;
		char[] символы = new char[строка.Длина];
		символы[0] = строка[0].Значение;
		int длина = 1;
		byte цвет = строка[0].Цвет;
		for (int i = 1; i < строка.Длина; i++)
		{
			if (строка[i].Цвет != цвет)
			{
				графика.НарисоватьСтроку(new string(символы, 0, длина), цвет, x, y);
				x += ШиринаСимвола * длина;
				цвет = строка[i].Цвет;
				длина = 0;
			}
			символы[длина] = строка[i].Значение;
			длина++;
		}
		графика.НарисоватьСтроку(new string(символы, 0, длина), цвет, x, y);
	}

	int Ширина
	{
		get
		{
			return ClientSize.Width - полосаПрокрутки.Width;
		}
	}

	int Высота
	{
		get
		{
			return ClientSize.Height;
		}
	}

	int ШиринаСимвола
	{
		get
		{
			return Графика.ШиринаСимвола;
		}
	}

	int ВысотаСимвола
	{
		get
		{
			return Графика.ВысотаСимвола;
		}
	}

	void ОпределитьВыделеннуюОбласть(out Point начало, out Point конец)
	{
		if (начальныеКоординатыУказателя.X == -1)
		{
			начало = new Point(-1, -1);
			конец = new Point(-1, -1);
			return;
		}
		начало = начальныеКоординатыУказателя;
		начало.X = Math.Max(начало.X, 0);
		начало.X = Math.Min(начало.X, Ширина - 1);
		начало.Y = Math.Max(начало.Y, 0);
		начало.Y = Math.Min(начало.Y, Высота - 1);
		конец = PointToClient(MousePosition);
		конец.X = Math.Max(конец.X, 0);
		конец.X = Math.Min(конец.X, Ширина - 1);
		конец.Y = Math.Max(конец.Y, 0);
		конец.Y = Math.Min(конец.Y, Высота - 1);
		if (начало.Y > конец.Y)
		{
			Point точка = конец;
			конец = начало;
			начало = точка;
		}
	}

	void РеализоватьВыделение(Строка линия, int y, int номерЛинии, Point начало, Point конец)
	{
		if (начало.X == -1)
			return;
		int началоВыделения = 0;
		int конецВыделения = линия.Длина - 1;
		bool нуженПереводСтроки = false;
		// однострочное выделение
		if (начало.Y >= y && конец.Y < y + ВысотаСимвола)
		{
			началоВыделения = начало.X / ШиринаСимвола;
			конецВыделения = конец.X / ШиринаСимвола;
			if (началоВыделения > конецВыделения)
			{
				int число = началоВыделения;
				началоВыделения = конецВыделения;
				конецВыделения = число;
			}
		}
		// первая строка многострочного выделения
		else if(начало.Y >= y && начало.Y < y + ВысотаСимвола)
		{
			началоВыделения = начало.X / ШиринаСимвола;
		}
		// строка внутри многострочного выделения
		else if (начало.Y < y && конец.Y >= y + ВысотаСимвола)
		{
			if (номерЛинии == 0)
				нуженПереводСтроки = true;
		}
		// последняя строка многострочного выделения (рисуется первой)
		else if (конец.Y >= y && конец.Y < y + ВысотаСимвола)
		{
			if (номерЛинии == 0)
				нуженПереводСтроки = true;
			конецВыделения = конец.X / ШиринаСимвола;
		}
		// строка не принадлежит выделенной области
		else
		{
			return;
		}
		if (началоВыделения <= линия.Длина - 1)
		{
			if (конецВыделения > линия.Длина - 1)
				конецВыделения = линия.Длина - 1;
			int длина = конецВыделения - началоВыделения + 1;
			выделенныйТекст.Insert(0, линия.ToString().Substring(началоВыделения, длина));
			графика.ИнвертироватьПрямоугольник(началоВыделения * ШиринаСимвола, y, длина * ШиринаСимвола, ВысотаСимвола);
		}
		if (нуженПереводСтроки)
			выделенныйТекст.Insert(0, "\r\n");
	}

	void НарисоватьСтроку(Строка строка, ref int y, int максимальнаяДлина, Point началоВыделеннойОбласти, Point конецВыделеннойОбласти)
	{
		Строка[] линии = строка.Разрезать(максимальнаяДлина);
		for (int i = линии.Length - 1; i >= 0 && y > -ВысотаСимвола; i--)
		{
			Строка линия = линии[i];
			НарисоватьСтроку(линия, y);
			int ширинаЛинии = линия.Длина * ШиринаСимвола;
			графика.ЗакраситьПрямоугольник(ширинаЛинии, y, Ширина - ширинаЛинии, ВысотаСимвола);
			РеализоватьВыделение(линия, y, i, началоВыделеннойОбласти, конецВыделеннойОбласти);
			y -= ВысотаСимвола;
		}
	}

#if ОТЛАДКА
	int числоПрорисовок = 0;
#endif

	void Нарисовать(Graphics г)
	{
		выделенныйТекст = new StringBuilder();
		if (Ширина <= 0 || Высота <= 0)
			return;
		графика.НачатьРисование(г);
		int максимальнаяДлинаЛинии = Ширина / ШиринаСимвола;
		if (максимальнаяДлинаЛинии == 0 || строки.ЧислоЭлементов == 0)
		{
			графика.ЗакраситьПрямоугольник(0, 0, Ширина, Высота);
			графика.ЗавершитьРисование();
			return;
		}
		Point началоВыделеннойОбласти;
		Point конецВыделеннойОбласти;
		ОпределитьВыделеннуюОбласть(out началоВыделеннойОбласти, out конецВыделеннойОбласти);
		int y = Высота - ВысотаСимвола;
		if (КомпактныйВывод)
		{
			Строка выводимаяСтрока = строки[полосаПрокрутки.Value].Копировать();
			int числоОдинаковыхСтрок = 1;
			string значениеВыводимойСтроки = выводимаяСтрока.ToString();
			for (int i = полосаПрокрутки.Value - 1; i >= 0 && y > -ВысотаСимвола; i--)
			{
				string значениеТекущейСтроки = строки[i].ToString();
				if (значениеТекущейСтроки != значениеВыводимойСтроки)
				{
					if (числоОдинаковыхСтрок > 1)
						выводимаяСтрока.Добавить(" (*" + числоОдинаковыхСтрок + ")", 15);
					НарисоватьСтроку(выводимаяСтрока, ref y, максимальнаяДлинаЛинии, началоВыделеннойОбласти, конецВыделеннойОбласти);
					выводимаяСтрока = строки[i].Копировать();
					числоОдинаковыхСтрок = 0;
					значениеВыводимойСтроки = значениеТекущейСтроки;
				}
				числоОдинаковыхСтрок++;
			}
			if (числоОдинаковыхСтрок > 1)
				выводимаяСтрока.Добавить(" (*" + числоОдинаковыхСтрок + ")", 15);
			НарисоватьСтроку(выводимаяСтрока, ref y, максимальнаяДлинаЛинии, началоВыделеннойОбласти, конецВыделеннойОбласти);
		}
		else
		{
			for (int i = полосаПрокрутки.Value; i >= 0 && y > -ВысотаСимвола; i--)
				НарисоватьСтроку(строки[i], ref y, максимальнаяДлинаЛинии, началоВыделеннойОбласти, конецВыделеннойОбласти);
		}
		графика.ЗакраситьПрямоугольник(0, 0, Ширина, y + ВысотаСимвола);
#if ОТЛАДКА
		числоПрорисовок++;
		графика.НарисоватьСтроку(числоПрорисовок.ToString(), 0xF0, 0, 0);
#endif
		графика.ЗавершитьРисование();
	}

	protected override void OnPaint(PaintEventArgs e)
	{
		lock (this)
		{
			Нарисовать(e.Graphics);
		}
	}
}

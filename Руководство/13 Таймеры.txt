Давать имена таймерам удобно в тех случаях, когда требуется обращаться к ним из триггеров. Если создать безымянный таймер, то обратиться к нему можно только по порядковому номеру (который можно узнать с помощью команды #списокТаймеров), а он может изменяться при остановке других таймеров.

В качестве примера использования тамеров реализуем автоматическое уклонение в бою:

bool вБою = false;

public override string ОбработатьКоманду(string команда)
{
	...
	if (команда == "автоуклонение")
	{
		if (вБою)
			return "уклон;#отсрочить 1900 автоуклонение";
		else
			return null;
	}
	...
	return base.ОбработатьКоманду(команда);
}

public override string ОбработатьСтроку(Строка строка, bool статуснаяСтрока)
{
	...
	Match match;
	string значение = строка.ToString();
	match = Regex.Match(значение, @"\[.+:.+\] >$");
	if (match.Success && статуснаяСтрока)
	{
		ЭлементВывода.Добавить(строка);
		if (!вБою)
		{
			вБою = true;
			return "автоуклонение";
		}
		return null;
	}
	match = Regex.Match(значение, @">$");
	if (match.Success && статуснаяСтрока)
	{
		ЭлементВывода.Добавить(строка);
		if (вБою)
			вБою = false;
		return null;
	}
	if (значение == "   Чего Ваша душа желает ?" && статуснаяСтрока) // при гибели персонажа
	{
		ЭлементВывода.Добавить(строка);
		if (вБою)
			вБою = false;
		return null;
	}
	if (значение.StartsWith("### ") && статуснаяСтрока) // при подключении и отключении
	{
		ЭлементВывода.Добавить(строка);
		if (вБою)
			вБою = false;
		if (значение == "### Соединение утеряно." || значение == "### Соединение разорвано пользователем.")
		{
			СохранитьПеременные(Text);
			персонажИдентифицирован = false;
			Text = "";
			return "!закрытьЖурнал";
		}
		return null;
	}
	...
	return base.ОбработатьСтроку(строка, статуснаяСтрока);
}

В данном примере при вступлении персонажа в бой запускается цикл автоуклонения, который повторяется каждые 1900 миллисекунд до тех пор, пока не закончится сражение.

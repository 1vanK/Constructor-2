using System;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;


class Подключение : Каркас
{
	bool требуетсяЗагрузкаПрофиля = true;

	void ЗагрузитьПеременные()
	{
		try
		{
			if (Переменные.Имя == "")
				return;
			string путь = НайтиПрофиль(Переменные.Имя + ".var");
			string[] строки = File.ReadAllLines(путь, Encoding.GetEncoding(1251));
			if (Переменные.Количество > 0)
				Переменные.Очистить();
			if (строки.Length > 0)
			{
				ЭлементВывода.Добавить("### Загрузка переменных...");
				foreach (string строка in строки)
					ОбработатьКоманды(строка);
			}
		}
		catch
		{
		}
	}

	void СохранитьПеременные()
	{
		try
		{
			if (Переменные.Имя == "")
				return;
			СоздатьПапкуПрофили();
			string путь = Path.Combine(ПапкаПрофили, Переменные.Имя + ".var");
			File.WriteAllLines(путь, Переменные.ПолучитьСписок(), Encoding.GetEncoding(1251));
		}
		catch
		{
		}
	}

	public override bool ОбработатьНажатиеКлавиши(Клавиша клавиша, bool ctrl, bool alt, bool shift)
	{
		if (ctrl && !alt && !shift && клавиша == Клавиша.Л)
		{
			ОбработатьВведенныйТекст("#подкл localhost 4000");
			return true;
		}
		if (ctrl && !alt && !shift && клавиша == Клавиша.Б)
		{
			ОбработатьВведенныйТекст("#подкл mud.ru 4000");
			return true;
		}
		if (ctrl && !alt && !shift && клавиша == Клавиша.О)
		{
			ОбработатьВведенныйТекст("#откл");
			return true;
		}
		return base.ОбработатьНажатиеКлавиши(клавиша, ctrl, alt, shift);
	}

	public override string ОбработатьСтроку(Строка строка, bool статуснаяСтрока)
	{
		Match match;
		string значение = строка.ToString();
		if (значение == "Select one :")
		{
			ЭлементВывода.Добавить(строка);
			return "2";
		}
		if (значение.StartsWith("* В связи с проблемами перевода"))
		{
			ЭлементВывода.Добавить(строка);
			return ";ктоя;счет";
		}
		if (значение.StartsWith("Пересоединяемся") || значение.StartsWith("Ваша душа вновь вернулась в тело"))
		{
			ЭлементВывода.Добавить(строка);
			return "ктоя;счет";
		}
		match = Regex.Match(значение, @"^Падежи : (\w+)/\w+/\w+/\w+/\w+/\w+$");
		if (match.Success)
		{
			ЭлементВывода.Добавить(строка);
			if (Переменные.Имя == "")
			{
				Переменные.Имя = match.Groups[1].Value;
				ЗагрузитьПеременные();
			}
			return null;
		}
		match = Regex.Match(значение, @"^Вы .* \(.+, .+, .+, (.+) \d+ уровня\)\.$");
		if (match.Success && требуетсяЗагрузкаПрофиля)
		{
			ЭлементВывода.Добавить(строка);
			требуетсяЗагрузкаПрофиля = false;
			return match.Result("#выполнить $1");
		}
		if (значение.IndexOf('>') != -1 && статуснаяСтрока)
		{
			ЭлементВывода.Добавить(строка);
			if (!ЭлементВывода.ЖурналОткрыт && !требуетсяЗагрузкаПрофиля)
				ЭлементВывода.ОткрытьЖурнал(Переменные.Имя, true);
			return null;
		}
		if (значение == "### Соединение утеряно." || значение == "### Соединение разорвано пользователем.")
		{
			ЭлементВывода.Добавить(строка);
			if (ЭлементВывода.ЖурналОткрыт)
				ЭлементВывода.ЗакрытьЖурнал();
			СохранитьПеременные();
			if (Переменные.Количество > 0)
				Переменные.Очистить();
			Переменные.Имя = "";
			требуетсяЗагрузкаПрофиля = true;
			return null;
		}
		return base.ОбработатьСтроку(строка, статуснаяСтрока);
	}

	protected override void OnClosed(EventArgs e)
	{
		СохранитьПеременные();
		base.OnClosed(e);
	}
}

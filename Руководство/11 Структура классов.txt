Для того чтобы писать эффективные конфиги желательно как можно подробнее изучить исходный код клиента. При написании Конструктора много времени было уделено организации классов и перепробованы несколько вариантов, с целью достичь как можно более удобной и понятной структуры. Насколько это получилось - судить Вам. В папке Ядро хранится минимально возможный для MUD-клиента набор классов, реализующий ввод информации с клавиатуры, вывод цветного текста на экран и обмен данными с сервером. В директории Каркас находятся классы, расширяющие возможности ядра и дополняющие клиент внутренними командами. В папке Конструктор содержится главный класс приложения (одновременно и главное окно приложения), реализующий межоконное взаимодействие. Файл Окно.cs, который вынесен в корневую директорию клиента, содержит одноименный класс Окно, наследуемый от класса Каркас и предназначенный для дальнейшего расширения возможностей клиента. Именно в этот файл Вы будете вносить основные изменения. Теперь рассмотрим некоторые не совсем очевидные вещи.

Ядро\ЭлементВывода\ЭлементВывода.cs
При добавлении строк к элементу вывода они не отображаются до тех пор, пока не будет вызвана функция Вывести(). Это сделано во избежание перерисовки экрана после добавления каждой строки, что сильно бы замедлило работу клиента.

Ядро\Соединение\Соединение.cs
При записи данных в сокет они не отправляются до тех пор, пока не будет вызвана функция ПередатьДанные(). При этом все записанные данные будут отправлены единым блоком. Это сделано для минимизации времени между выполнением команд. То есть, если вы наберете "север;сби .Враг", то вероятнее всего первым нападете на противника, даже если он установил триггер на Ваш приход.

Ядро\Общее\Строка.cs
Строка является ссылочным типом, то есть если вы приравниваете одну строку другой, то копии строки не создается, а происходит лишь копирование указателя на нее. Преимуществом этого является то, что строку можно, к примеру, сперва добавить к элементу вывода, а затем уже модифицировать. Именно так происходит формирование эха команд. Для того чтобы модифицировать строку без изменения оригинала воспользуйтесь методом Копировать().

Конструктор\Конструктор.cs
Обратиться к дополнительному окну можно следующим образом: Конструктор.ГлавноеОкно.ЭлементВывода. Вот пример триггера, который реализует вывод теллов в дополнительное окно:

public override string ОбработатьСтроку(Строка строка, bool статуснаяСтрока)
{
	...
	match = Regex.Match(значение, @"^\S+ сказал.? Вам : '.*'$");
	if (match.Success)
	{
		ЭлементВывода.Добавить(строка);
		Конструктор.ГлавноеОкно.ЭлементВывода.Вывести(строка);
		return null;
	}
	...
	return base.ОбработатьСтроку(строка, статуснаяСтрока);
}

Каркас\Каркас.cs
Подстановка переменных происходит при вводе команды, а удаление обратных косых черт перед точками с запятой производится прямо перед отправкой данных серверу.


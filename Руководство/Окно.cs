/*
	Пример конфига
*/


using System.Text.RegularExpressions;


class Окно : Каркас
{
	bool вБою = false;

	public override bool ОбработатьНажатиеКлавиши(Клавиша клавиша, bool ctrl, bool alt, bool shift)
	{
		if (!ctrl && !alt && !shift)
		{
			switch (клавиша)
			{
				case Клавиша.Num8:
					ОбработатьВведенныйТекст("n");
					return true;
				case Клавиша.Num2:
					ОбработатьВведенныйТекст("s");
					return true;
				case Клавиша.Num4:
					ОбработатьВведенныйТекст("w");
					return true;
				case Клавиша.Num6:
					ОбработатьВведенныйТекст("e");
					return true;
				case Клавиша.Num9:
					ОбработатьВведенныйТекст("u");
					return true;
				case Клавиша.Num3:
					ОбработатьВведенныйТекст("d");
					return true;
				case Клавиша.Num7:
					ОбработатьВведенныйТекст("см");
					return true;
				case Клавиша.Num5:
					ОбработатьВведенныйТекст("огл");
					return true;
				case Клавиша.Num1:
					ОбработатьВведенныйТекст("вых");
					return true;
				case Клавиша.NumMin:
					ОбработатьВведенныйТекст("отд;приказ все спать");
					return true;
				case Клавиша.NumAdd:
					ОбработатьВведенныйТекст("просн;вст;прик все просн;прик все вст");
					return true;
			}
		}
		if (ctrl && !alt && !shift)
		{
			switch (клавиша)
			{
				case Клавиша.Л:
					ОбработатьВведенныйТекст("#подкл localhost 4000");
					return true;
				case Клавиша.Б:
					ОбработатьВведенныйТекст("#подкл mud.ru 4000");
					return true;
				case Клавиша.О:
					ОбработатьВведенныйТекст("#откл");
					return true;
			}
		}
		if (!ctrl && !alt && !shift && клавиша == Клавиша.F1)
		{
			ОбработатьВведенныйТекст("зач возв;#приказать всем {зач возв .$ИМЯ}");
			return true;
		}
		return base.ОбработатьНажатиеКлавиши(клавиша, ctrl, alt, shift);
	}

	public override string ОбработатьСтроку(Строка строка, bool статуснаяСтрока)
	{
		строка.Перекрасить("с севера", 0x0A);
		строка.Перекрасить("с юга", 0x0A);
		строка.Перекрасить("с запада", 0x0A);
		строка.Перекрасить("с востока", 0x0A);
		строка.Перекрасить("сверху", 0x0A);
		строка.Перекрасить("снизу", 0x0A);
		строка.Заменить("поплелись", "направили свой путь");
		строка.Заменить("Вас", "ВАС", 0x0B);
		Match match;
		string значение = строка.ToString();
		match = Regex.Match(значение, @"^Падежи : (\w+)/\w+/\w+/\w+/\w+/\w+$");
		if (match.Success && Переменные.Имя == "")
		{
			ЭлементВывода.Добавить(строка);
			Переменные.Имя = match.Result("$1");
			ЭлементВывода.ОткрытьЖурнал(Переменные.Имя, true);
			return null;
		}
		if (значение.StartsWith("* В связи с проблемами перевода"))
		{
			ЭлементВывода.Добавить(строка);
			return ";ктоя";
		}
		if (значение.StartsWith("Пересоединяемся") || значение.StartsWith("Ваша душа вновь вернулась в тело"))
		{
			ЭлементВывода.Добавить(строка);
			return "ктоя";
		}
		match = Regex.Match(значение, @"^\S+ сказал.? Вам : '.*'$");
		if (match.Success)
		{
			ЭлементВывода.Добавить(строка);
			Конструктор.ГлавноеОкно.ЭлементВывода.Вывести(строка);
			return null;
		}
		match = Regex.Match(значение, @"\[.+:.+\] >$");
		if (match.Success && статуснаяСтрока)
		{
			ЭлементВывода.Добавить(строка);
			if (!вБою)
			{
				вБою = true;
				return "автоуклонение";
			}
			return null;
		}
		match = Regex.Match(значение, @">$");
		if (match.Success && статуснаяСтрока)
		{
			ЭлементВывода.Добавить(строка);
			if (вБою)
				вБою = false;
			return null;
		}
		if (значение == "   Чего Ваша душа желает ?" && статуснаяСтрока) // при гибели персонажа
		{
			ЭлементВывода.Добавить(строка);
			if (вБою)
				вБою = false;
			return null;
		}
		if (значение.StartsWith("### ") && статуснаяСтрока) // при подключении и отключении
		{
			ЭлементВывода.Добавить(строка);
			if (вБою)
				вБою = false;
			if (значение == "### Соединение утеряно." || значение == "### Соединение разорвано пользователем.")
			{
				Переменные.Имя = "";
				ЭлементВывода.ЗакрытьЖурнал();
				return null;
			}
			return null;
		}
		match = Regex.Match(значение, @"^### (Версия MCCP|Коэффициент сжатия): (.+)\.");
		if (match.Success)
		{
			ЭлементВывода.Добавить(строка);
			return match.Result("эмо : $1 = $2");
		}
		if (значение == "### Сжатие отсутствует.")
		{
			ЭлементВывода.Добавить(строка);
			return "эмо : Сжатие отсутствует";
		}
		if (значение == "Минул час.")
		{
			ЭлементВывода.Добавить(new Строка("----- МИНУЛ ЧАС -----", 0x09));
			return "петь;ик";
		}
		if (значение.StartsWith("Ледяной щит"))
			return null;
		if (значение.StartsWith("Воздушный щит"))
			return null;
		if (значение.StartsWith("Вам лучше встать"))
		{
			строка.Перекрасить(0x9F);
			ЭлементВывода.Добавить(строка);
			return null;
		}
		return base.ОбработатьСтроку(строка, статуснаяСтрока);
	}

	public override string ОбработатьКоманду(string команда)
	{
		if (команда == "автоуклонение")
		{
			if (вБою)
				return "уклон;#отсрочить 1900 автоуклонение";
			else
				return null;
		}
		if (команда == "вп")
			return "приказ все войти пент;войти пент";
		Match match;
		match = Regex.Match(команда, @"^ф (.+)");
		if (match.Success)
			return match.Result("#приказать {$ТАНК} {$1};#отсрочить 1000 {$1}");
		match = Regex.Match(команда, "^п( .+|$)");
		if (match.Success)
			return match.Result("подн$1");
		match = Regex.Match(команда, "^з (.+)");
		if (match.Success)
			return match.Result("спря;закол $1");
		match = Regex.Match(команда, "^у (.+)");
		if (match.Success)
			return match.Result("п $1;з $1");
		if (команда == "время")
		{
			ЭлементВывода.ДобавитьЭхо(команда);
			ЭлементВывода.Добавить(new Строка(System.DateTime.Now.ToString(), 0x09));
			return null;
		}
		if (команда == "веса")
		{
			ЭлементВывода.ДобавитьЭхо(команда);
			ЭлементВывода.Добавить(0x0F, "Сила  Правая Левая  Двуруч    Сила  Правая Левая  Двуруч");
			ЭлементВывода.Добавить(" 01     01     00     01       26     23     13     36");
			ЭлементВывода.Добавить(" 02     02     01     03       27     23     14     37");
			ЭлементВывода.Добавить(" 03     03     01     04       28     24     14     38");
			ЭлементВывода.Добавить(" 04     04     02     06       29     24     15     39");
			ЭлементВывода.Добавить(" 05     05     02     07       30     25     15     40");
			ЭлементВывода.Добавить(" 06     06     03     09       31     25     15     40");
			ЭлементВывода.Добавить(" 07     07     03     10       32     25     15     40");
			ЭлементВывода.Добавить(" 08     08     04     12       33     25     16     41");
			ЭлементВывода.Добавить(" 09     09     04     13       34     26     16     42");
			ЭлементВывода.Добавить(" 10     10     05     15       35     26     16     42");
			ЭлементВывода.Добавить(" 11     11     05     16       36     26     17     43");
			ЭлементВывода.Добавить(" 12     12     06     18       37     26     17     43");
			ЭлементВывода.Добавить(" 13     13     06     19       38     27     17     44");
			ЭлементВывода.Добавить(" 14     14     07     21       39     27     17     44");
			ЭлементВывода.Добавить(" 15     15     07     22       40     27     18     45");
			ЭлементВывода.Добавить(" 16     16     08     24       41     27     18     45");
			ЭлементВывода.Добавить(" 17     17     08     25       42     28     18     46");
			ЭлементВывода.Добавить(" 18     18     09     27       43     28     18     46");
			ЭлементВывода.Добавить(" 19     19     09     28       44     28     19     47");
			ЭлементВывода.Добавить(" 20     20     10     30       45     28     19     47");
			ЭлементВывода.Добавить(" 21     20     11     31       46     29     19     48");
			ЭлементВывода.Добавить(" 22     21     11     32       47     29     19     48");
			ЭлементВывода.Добавить(" 23     21     12     33       48     29     19     48");
			ЭлементВывода.Добавить(" 24     22     12     34       49     29     20     49");
			ЭлементВывода.Добавить(" 25     22     13     35       50     30     20     50");
			return null;
		}
		return base.ОбработатьКоманду(команда);
	}
}

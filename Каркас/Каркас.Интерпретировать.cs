/*
	Базовый класс для конфига
*/


using А = Анализатор;


partial class Каркас
{
	public void Интерпретировать(string команда)
	{
		string строкаАргументов;
		А.РазделитьКоманду(команда, out команда, out строкаАргументов);
		if (команда == "")
			goto Финиш;
		string[] аргументы = new string[0];
		if (строкаАргументов != "")
			аргументы = А.РазделитьАргументы(строкаАргументов);
		if (А.Сопоставить(команда, "подключиться"))
		{
			if (аргументы.Length == 2 && А.ЯвляетсяЧислом(аргументы[1]))
			{
				Соединение.Установить(аргументы[0], int.Parse(аргументы[1]));
				return;
			}
			if (аргументы.Length == 4 && А.ЯвляютсяЧислами(аргументы[1], аргументы[3]))
			{
				Соединение.Установить(аргументы[0], int.Parse(аргументы[1]), аргументы[2], int.Parse(аргументы[3]));
				return;
			}
			ЭлементВывода.Добавить("### Формат команды: " + А.КомандныйСимвол + "подключиться <сервер> <порт>[ <прокси-сервер> <порт прокси>].");
			return;
		}
		if (А.Сопоставить(команда, "отключиться"))
		{
			Соединение.Разорвать();
			return;
		}
		if (А.Сопоставить(команда, "информация"))
		{
			Соединение.ВыдатьИнформацию();
			return;
		}
		if (А.Сопоставить(команда, "цвета"))
		{
			ВывестиТаблицуЦветов();
			return;
		}
		if (А.Сопоставить(команда, "переменная"))
		{
			if (аргументы.Length == 1)
			{
				Переменные.Удалить(аргументы[0]);
				return;
			}
			if (аргументы.Length == 2)
			{
				Переменные[аргументы[0]] = аргументы[1];
				return;
			}
			ЭлементВывода.Добавить("### Формат команды: " + А.КомандныйСимвол + "переменная <имя>[ <значение>].");
			return;
		}
		if (А.Сопоставить(команда, "удалитьВсеПеременные"))
		{
			Переменные.Очистить();
			return;
		}
		if (А.Сопоставить(команда, "списокПеременных") || А.Сопоставить(команда, "переменные"))
		{
			Переменные.ВывестиСписок();
			return;
		}
		if (А.Сопоставить(команда, "сочетаниеКлавиш") || А.Сопоставить(команда, "кнопка") || А.Сопоставить(команда, "клавиша"))
		{
			if (аргументы.Length == 1)
			{
				ГорячиеКлавиши.Удалить(аргументы[0]);
				return;
			}
			if (аргументы.Length == 2)
			{
				ГорячиеКлавиши.Добавить(аргументы[0], аргументы[1]);
				return;
			}
			ЭлементВывода.Добавить("### Формат команды: " + А.КомандныйСимвол + "сочетаниеКлавиш <комбинация клавиш>[ <команды>].");
			return;
		}
		if (А.Сопоставить(команда, "удалитьВсеСочетанияКлавиш") || А.Сопоставить(команда, "удалитьВсеКнопки") || А.Сопоставить(команда, "удалитьВсеКлавиши"))
		{
			ГорячиеКлавиши.Очистить();
			return;
		}
		if (А.Сопоставить(команда, "списокСочетанийКлавиш") || А.Сопоставить(команда, "сочетанияКлавиш") || А.Сопоставить(команда, "кнопки") || А.Сопоставить(команда, "клавиши"))
		{
			ГорячиеКлавиши.ВывестиСписок();
			return;
		}
		if (А.Сопоставить(команда, "имя"))
		{
			if (аргументы.Length == 0)
			{
				Переменные.Имя = "";
				return;
			}
			else if (аргументы.Length == 1)
			{
				Переменные.Имя = аргументы[0];
				return;
			}
			ЭлементВывода.Добавить("### Формат команды: " + А.КомандныйСимвол + "имя[ <имя профиля>].");
			return;
		}
		if (А.Сопоставить(команда, "приказать"))
		{
			if (аргументы.Length == 2)
			{
				if (А.Сравнить(аргументы[0], "все") || А.Сравнить(аргументы[0], "всем"))
					Конструктор.ГлавноеОкно.ПриказатьВсем(аргументы[1], this);
				else if (А.ЯвляетсяЧислом(аргументы[0]))
					Конструктор.ГлавноеОкно.Приказать(int.Parse(аргументы[0]), аргументы[1]);
				else
					Конструктор.ГлавноеОкно.Приказать(аргументы[0], аргументы[1]);
				return;
			}
			ЭлементВывода.Добавить("### Формат команды: " + А.КомандныйСимвол + "приказать все|всем<номер окна>|<имя окна> <команды>.");
			return;
		}
		if (А.Сопоставить(команда, "активировать"))
		{
			if (аргументы.Length == 1)
			{
				if (А.ЯвляетсяЧислом(аргументы[0]))
					Конструктор.ГлавноеОкно.АктивироватьОкно(int.Parse(аргументы[0]));
				else
					Конструктор.ГлавноеОкно.АктивироватьОкно(аргументы[0]);
				return;
			}
			ЭлементВывода.Добавить("### Формат команды: " + А.КомандныйСимвол + "активировать <номер окна>|<имя окна>.");
			return;
		}
		if (А.Сопоставить(команда, "создатьПрофиль") || А.Сопоставить(команда, "новыйПрофиль"))
		{
			Конструктор.ГлавноеОкно.СоздатьПрофиль();
			return;
		}
		if (А.Сопоставить(команда, "открытьПрофиль"))
		{
			if (аргументы.Length == 0)
				Конструктор.ГлавноеОкно.ОткрытьПрофиль();
			else if (аргументы.Length == 1)
				Конструктор.ГлавноеОкно.ОткрытьПрофиль(аргументы[0]);
			else
				ЭлементВывода.Добавить("### Формат команды: " + А.КомандныйСимвол + "открытьПрофиль[ <путь>].");
			return;
		}
		if (А.Сопоставить(команда, "выполнить"))
		{
			if (аргументы.Length == 0)
				Выполнить(false);
			else if (аргументы.Length == 1)
				Выполнить(аргументы[0], false);
			else
				ЭлементВывода.Добавить("### Формат команды: " + А.КомандныйСимвол + "выполнить[ <путь>].");
			return;
		}
		if (А.Сопоставить(команда, "сохранитьПрофиль"))
		{
			if (аргументы.Length == 0)
				СохранитьПрофиль();
			else if (аргументы.Length == 1)
				СохранитьПрофиль(аргументы[0]);
			else
				ЭлементВывода.Добавить("### Формат команды: " + А.КомандныйСимвол + "сохранитьПрофиль[ <путь>].");
			return;
		}
		if (А.Сопоставить(команда, "сохранитьПрофильКак"))
		{
			if (аргументы.Length == 0)
				СохранитьПрофильКак();
			else
				ЭлементВывода.Добавить("### Формат команды: " + А.КомандныйСимвол + "сохранитьПрофильКак.");
			return;
		}
		if (А.Сопоставить(команда, "триггер"))
		{
			if (аргументы.Length == 1)
			{
				Триггеры.Удалить(аргументы[0]);
				return;
			}
			if (аргументы.Length == 2)
			{
				Триггеры[аргументы[0]] = аргументы[1];
				return;
			}
			ЭлементВывода.Добавить("### Формат команды: " + А.КомандныйСимвол + "триггер <шаблон>[ <реакция>].");
			return;
		}
		if (А.Сопоставить(команда, "удалитьВсеТриггеры"))
		{
			Триггеры.Очистить();
			return;
		}
		if (А.Сопоставить(команда, "списокТриггеров") || А.Сопоставить(команда, "триггеры"))
		{
			Триггеры.ВывестиСписок();
			return;
		}
		if (А.Сопоставить(команда, "макрос"))
		{
			if (аргументы.Length == 1)
			{
				Макросы.Удалить(аргументы[0]);
				return;
			}
			if (аргументы.Length == 2)
			{
				Макросы[аргументы[0]] = аргументы[1];
				return;
			}
			ЭлементВывода.Добавить("### Формат команды: " + А.КомандныйСимвол + "макрос <шаблон>[ <команды>].");
			return;
		}
		if (А.Сопоставить(команда, "удалитьВсеМакросы"))
		{
			Макросы.Очистить();
			return;
		}
		if (А.Сопоставить(команда, "списокМакросов") || А.Сопоставить(команда, "макросы"))
		{
			Макросы.ВывестиСписок();
			return;
		}
		if (А.Сопоставить(команда, "журнал") || А.Сопоставить(команда, "открытьЖурнал"))
		{
			if (аргументы.Length == 0)
				ЭлементВывода.ОткрытьЖурнал();
			else if (аргументы.Length == 1)
				ЭлементВывода.ОткрытьЖурнал(аргументы[0]);
			else
				ЭлементВывода.Добавить("### Формат команды: " + А.КомандныйСимвол + "[открыть]журнал[ <имя>].");
			return;
		}
		if (А.Сопоставить(команда, "закрытьЖурнал"))
		{
			ЭлементВывода.ЗакрытьЖурнал();
			return;
		}
		if (А.Сопоставить(команда, "воспроизвести"))
		{
			if (аргументы.Length != 1)
				ЭлементВывода.Добавить("### Формат команды: " + А.КомандныйСимвол + "воспроизвести <путь>.");
			else
				ЭлементВывода.Воспроизвести(аргументы[0]);
			return;
		}
		if (А.Сопоставить(команда, "стоп"))
		{
			ЭлементВывода.Стоп();
			return;
		}
		if (А.Сопоставить(команда, "пауза"))
		{
			ЭлементВывода.Пауза = !ЭлементВывода.Пауза;
			return;
		}
		if (А.Сопоставить(команда, "скорость"))
		{
			if (аргументы.Length == 1 && А.ЯвляетсяЧислом(аргументы[0]))
			{
				int число = int.Parse(аргументы[0]);
				if (число >= 1 && число <= 10000)
				{
					ЭлементВывода.Скорость = число;
					return;
				}
			}
			ЭлементВывода.Добавить("### Формат команды: " + А.КомандныйСимвол + "скорость <1..100..10000>.");
			return;
		}
		if (А.Сопоставить(команда, "отсрочить"))
		{
			if (аргументы.Length == 2 && А.ЯвляетсяЧислом(аргументы[0]))
				Таймеры.Отсрочить(int.Parse(аргументы[0]), аргументы[1]);
			else
				ЭлементВывода.Добавить("### Формат команды: " + А.КомандныйСимвол + "отсрочить <время в мс> <команды>.");
			return;
		}
		if (А.Сопоставить(команда, "таймер") || А.Сопоставить(команда, "запуститьТаймер"))
		{
			if (аргументы.Length == 5 && А.ЯвляютсяЧислами(аргументы[1], аргументы[2], аргументы[3]))
				Таймеры.ЗапуститьТаймер(аргументы[0], int.Parse(аргументы[1]), int.Parse(аргументы[2]), int.Parse(аргументы[3]), аргументы[4]);
			else if (аргументы.Length == 4 && А.ЯвляютсяЧислами(аргументы[0], аргументы[1], аргументы[2]))
				Таймеры.ЗапуститьТаймер(null, int.Parse(аргументы[0]), int.Parse(аргументы[1]), int.Parse(аргументы[2]), аргументы[3]);
			else
				ЭлементВывода.Добавить("### Формат команды: " + А.КомандныйСимвол + "[запустить]таймер [<имя> ]<задержка> <интервал> <число повторов> <команды>.");
			return;
		}
		if (А.Сопоставить(команда, "списокТаймеров") || А.Сопоставить(команда, "таймеры"))
		{
			Таймеры.ВывестиСписок();
			return;
		}
		if (А.Сопоставить(команда, "остановитьТаймер"))
		{
			if (аргументы.Length == 1)
			{
				if (А.ЯвляетсяЧислом(аргументы[0]))
					Таймеры.ОстановитьТаймер(int.Parse(аргументы[0]));
				else
					Таймеры.ОстановитьТаймер(аргументы[0]);
				return;
			}
			ЭлементВывода.Добавить("### Формат команды: " + А.КомандныйСимвол + "остановитьТаймер <номер>|<имя>.");
			return;
		}
		if (А.Сопоставить(команда, "остановитьВсеТаймеры"))
		{
			Таймеры.ОстановитьВсеТаймеры();
			return;
		}
	Финиш:
		ЭлементВывода.Добавить("### Неправильная команда.");
	}
}
